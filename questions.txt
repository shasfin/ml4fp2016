How to treat conditionals in the synthesis process?

___________________________________________________

List of benchmarks

- I want to try nested data structures (lists of lists and lists of trees) with Synquid
- Three sections: easy (the baseline, I want my algorithm to achieve those examples in any case, and just to see if it's working), medium and hard. Not all programs in medium and hard should be synthesizeble with Synquid in reasonable time or the specification should be less trivial.
- I want to compare against Synquid, Myth and Lambda square. Or better, against papers with code that do program synthesis for functional programs.

- List all programs used in the benchmarks of the papers you read.
- Try them in Synquid.
- Take the list from the google docs.
- Try them in Synquid as well.
- Prune the list.

____________________________________________________
What are my six official papers:
1) Lambda square
2) Synquid
3) Myth
4) Type-theoretic
5) Type-theoretic, the second paper
6) ???

What I have in my folder:
Katayama (Monte-Carlo method to test for equality of programs)
Gulwani (overview of methods used in education)
Gulwani (hole-based synthesis from components, for example for bit-manipulation programs and for de-obfuscation of code)

____________________________________________________
Hindley-Milner type system

type inference

program enumaration: exhaustive enumeration for context free language (no standard way)

Read at least the first 6-7 references

1-2 weeks

Most related paper: 2015 (the first one)

___________________________________________________
With or without lambda expressions?

Which programming language? Haskell? ML?
(I mean, for the programs to synthesize)
Think of a way to make it scale. If you implement all the, say, Prelude functions, then you need to leave a clear entry point for other programmers to add some other primitives.

Target language: straight-line functional programs from a library of functional components. Purely applicative, without lambda expressions nor nested functions.
The library components are explicitly typed in the Hindley-Milner type system.

Primary open question: how to discover those components that are relevant to the specific problem instance?
More concrete problem to start with: how to prune the search space based on the component semantics?
____________________________________________________
Goals:

some representation of the target language -> a week (maximum)
	--> How to represent the arguments?

program that executes programs of the target language (to verify the input/output pairs) -> same week as previous goal

set up the system (parse the input/output pairs, testing framework and so on)

program that enumerates programs of the target language (up to a certain size) -> two weeks (minimum)
	direct the search, use type inference, prune not well-typed programs

direct the search using trace information, play with the system -> three months
	more subgoals

write the report -> 1.5 months, aka 6 weeks

_____________________________________________________
Topics I should more or less know:
1. Rudimentary computational learning theory --> keine Ahnung --> there is a book
2. Syntax-guided synthesis --> keine Ahnung --> try the slides that you have from Vitautas
3. Type inference for Hindley Milner --> keine Ahnung
4. Synthesis based on version-space algebras --> keine Ahnung --> there is a paper
5. Recent advances in program synthesis --> the papers I am reading?ddddxdxxduuuuuuuuuuuuu

_______________________________________________________
I need a package structure.
In one Package I will have the abstract class Component (for now with name and eval, in the future also with the type) and the singleton objects extending it and implementing eval.
In the other package I will have the interpreter (an ADT).
This aids extensibility: a client can simply add another library component without having to know how my code actually works.
And it is also good for modularity.
Then I will maybe have another package for the generator, with all the variants. And the framework.
And I must implement the story with the types. Unification, type inference and bla-bla-bla.